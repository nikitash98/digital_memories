/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public\\FilmCamera.glb
*/

import React, {useMemo, useRef, useLayoutEffect, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import * as THREE from 'three'
import { useFrame } from "@react-three/fiber";
import vertexShader from './animatedVertexShader';
import fragmentShader from './basicfragmentShader';
export function FilmCamera(props) {
  const { nodes, materials } = useGLTF('FilmCamera.glb')
  console.log(nodes)
  const plant_material = new THREE.MeshBasicMaterial()

  const meshRef = useRef()
  const smallref = useRef()
  const sphereref = useRef()
  const points = useRef();


  const uniforms = useMemo(
    () => ({
      slide: {
        value: 0,
      },
    }),
    []
  );
  let running = false
  useLayoutEffect(() => {
  }, []);

  useEffect(()=> {
    console.log(nodes["#CAM0001_Body"])
    smallref.current.setAttribute( 'position', new THREE.BufferAttribute(new Float32Array(nodes["#CAM0001_Body"].geometry.attributes.position.array), 3));
    smallref.current.setAttribute( 'customPosition1', new THREE.BufferAttribute(new Float32Array(nodes["#CAM0001_Body"].geometry.morphAttributes.position[0].array), 3));
    smallref.current.setAttribute( 'customPosition2', new THREE.BufferAttribute(new Float32Array(nodes["#CAM0001_Body"].geometry.morphAttributes.position[1].array), 3));

    smallref.current.setAttribute( 'color', new THREE.BufferAttribute(new Float32Array(nodes["#CAM0001_Body"].geometry.attributes.color.array), 3));
    console.log(smallref)
  })

  function handleHover(){
    running = true;
  }
  useFrame((state, delta) => {
    // oscillate the morphTargetInfluences
    //<sphereBufferGeometry ref = {sphereref}/>
    //
    const { clock } = state;

    if(running) {
      points.current.material.uniforms.slide.value += delta
    }

  });

/*
      <mesh ref = {meshRef} name="#CAM0001_Body" geometry={nodes['#CAM0001_Body'].geometry} material={plant_material} morphTargetDictionary={nodes['#CAM0001_Body'].morphTargetDictionary} morphTargetInfluences={nodes['#CAM0001_Body'].morphTargetInfluences}>
        <mesh geometry={nodes['#CAM0001_Battery_Check'].geometry} material={plant_material} position={[0.05, 0.07, 0]} />
        <mesh geometry={nodes['#CAM0001_Film_Advance'].geometry} material={materials['#CAM0001_Textures']} position={[-0.06, 0.08, 0]} />
        <mesh geometry={nodes['#CAM0001_Shutter'].geometry} material={materials['#CAM0001_Textures']} position={[-0.03, 0.08, 0.01]} />
        <mesh geometry={nodes['#CAM0001_Shutter_Speed'].geometry} material={materials['#CAM0001_Textures']} position={[-0.06, 0.07, 0]} />
        <mesh geometry={nodes['#CAM0001_Spool'].geometry} material={materials['#CAM0001_Textures']} position={[0.05, 0.08, 0]} />
      </mesh>

*/
  return (
    <group {...props} dispose={null} >
        

      <points scale={2.0} ref={points}>

        <bufferGeometry ref = {smallref}/> 
        <shaderMaterial
            depthWrite={true}
            fragmentShader={fragmentShader}
            vertexShader={vertexShader}
            uniforms={uniforms}
            />
      </points>
      <mesh position={[0, 0, 0]} onPointerOver={handleHover}>
                <boxGeometry attach="geometry" args={[.2, .2, .2]}  />
                <meshStandardMaterial attach="material" color="#6be092" wireframe/>
      </mesh>
    </group>
  )
}

useGLTF.preload('FilmCamera.glb')
