/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/guy.glb
*/

import React, { useRef, useEffect } from 'react'
import { useGLTF, useAnimations, PointMaterial, Point } from '@react-three/drei'
import * as THREE from "three" // <---

export function Guy(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('guy.glb')
  const { actions } = useAnimations(animations, group)
  const pointRef = useRef();

  const geometry = nodes.Body.geometry;
  useEffect(() => {
    actions.MikeAlgerAction.play();
    actions.MikeAlgerAction.paused = true;
    actions.MikeAlgerAction.loop = 0
    actions.MikeAlgerAction.clampWhenFinished = true
    actions.MikeAlgerAction.repetitions = 0;
    console.log(actions.MikeAlgerAction)
  }, []);
  const handleHover = (e) => {
    document.body.style.cursor = 'pointer';
    console.log(props.camRef.current)
    props.camRef.current.fov = 20;
    actions.MikeAlgerAction.play();
    actions.MikeAlgerAction.paused = false;


}
const unHover = (e) => {
    document.body.style.cursor = 'auto';
    props.camRef.current.fov = 50;
}
console.log(nodes)

Object.values(nodes).forEach((node) => {
  node.traverse((child) => {
    node.frustumCulled = false

  });
});

const test_material = new THREE.PointsMaterial( { color: 0xFFFFFFF } );
const plant_material = new THREE.MeshStandardMaterial({color: 0x626967, opacity: 0.5, transparent: true, wireframe:true, vertexColors: true})

//materials.MikeAlger_Material
console.log(geometry)

  return (
    <group ref={group} {...props} dispose={null} frustumCulled={false}>


      <group name="Scene">
        <group name="MikeAlger" position={[+1.16, -0.4, -0.77]} rotation={[Math.PI / 2, 0, 1.78]} scale={0.01}>
          <group name="Subdivision_Surface" />
          <group name="Subdivision_Surface_2" />
          <group name="Subdivision_Surface_3" />
          <group name="Subdivision_Surface_4" />
          <group name="Subdivision_Surface_5" />
          <group name="Subdivision_Surface_6" />
          <primitive object={nodes.mixamorig_Hips} frustumCulled={false}/>
          <skinnedMesh name="Bracelet" frustumCulled={false} geometry={nodes.Bracelet.geometry} material={plant_material} skeleton={nodes.Bracelet.skeleton} />
          <skinnedMesh name="Hair" frustumCulled={false} geometry={nodes.Hair.geometry} material={plant_material} skeleton={nodes.Hair.skeleton} />
          <skinnedMesh name="Pants" frustumCulled={false} geometry={nodes.Pants.geometry} material={plant_material} skeleton={nodes.Pants.skeleton} />
          <skinnedMesh name="Shirt" frustumCulled={false} geometry={nodes.Shirt.geometry} material={plant_material} skeleton={nodes.Shirt.skeleton} />
          <skinnedMesh name="Shoes" frustumCulled={false} geometry={nodes.Shoes.geometry} material={plant_material} skeleton={nodes.Shoes.skeleton} />
          <skinnedMesh name="Sweatshirt" frustumCulled={false} geometry={nodes.Sweatshirt.geometry} material={plant_material} skeleton={nodes.Sweatshirt.skeleton} />
          <skinnedMesh name="Body" frustumCulled={false} geometry={nodes.Body.geometry} material={plant_material} skeleton={nodes.Body.skeleton} morphTargetDictionary={nodes.Body.morphTargetDictionary} morphTargetInfluences={nodes.Body.morphTargetInfluences} />
        </group>
      </group>
  

      <mesh position={[1.3, 0.8, 0.8]} onPointerOver={handleHover} onPointerOut={unHover}>
                <boxGeometry attach="geometry" args={[.3, .3, .3]}  />
                <meshStandardMaterial attach="material" color="#6be092" wireframe/>
            </mesh>
    </group>
  )
}


useGLTF.preload('guy.glb')
