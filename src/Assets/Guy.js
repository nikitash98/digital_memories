/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/guy.glb
*/

import React, { useRef, useEffect, useState } from 'react'
import { useGLTF, useAnimations, PointMaterial, Point } from '@react-three/drei'
import * as THREE from "three" // <---
import { useFrame } from 'react-three-fiber'
import BasicParticles from '../BasicParticles'
export function Guy(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('guy.glb')
  const { actions } = useAnimations(animations, group)
  const pointRef = useRef();
  const basicRef = useRef()
  const geometry = nodes.Body.geometry;

  const [noiseState, setNoiseState] = useState(0)
  let zoom = false
  useEffect(() => {

  }, []);
  

  console.log("ANOTHER ONE")
  const handleHover = (e) => {
    document.body.style.cursor = 'pointer';
    zoom = true
    setNoiseState(2.0)
    
}
const unHover = (e) => {
    document.body.style.cursor = 'auto';
    zoom = false;
    props.camRef.current.fov = 50;
    setNoiseState(0)
    props.setLookPositionIndex()
}

Object.values(nodes).forEach((node) => {
  node.traverse((child) => {
    node.frustumCulled = false

  });
});

useFrame(() => {
  if(zoom) {
  }

})
const test_material = new THREE.PointsMaterial( { color: 0xFFFFFFF } );
const plant_material = new THREE.MeshStandardMaterial({color: 0x626967, opacity: 0.5, transparent: true, wireframe:true, vertexColors: true})

//materials.MikeAlger_Material

  return (
    <group ref={group} {...props} dispose={null} frustumCulled={false} position={props.position}>
      <group>
      <BasicParticles ref = {basicRef} filename = "anto.ply" point_size = {10.0} noise ={noiseState}></BasicParticles>

      </group>
      <mesh position={[.2, .6, 0]} onPointerOver={handleHover} onPointerOut={unHover}>
                <boxGeometry attach="geometry" args={[.3, 1.5, .3]}  />
                <meshStandardMaterial attach="material" color="#6be092" wireframe/>
      </mesh>
    </group>
  )
}


useGLTF.preload('guy.glb')
